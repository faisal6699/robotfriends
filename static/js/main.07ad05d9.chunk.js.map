{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchField.js","Components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","item","i","key","SearchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","user","this","filterArray","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4NAgBeA,EAdF,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MAEvB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,GAAOG,UAAU,SAChE,6BACC,4BAAKF,GACL,2BAAIC,MCcOI,EApBG,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACnB,OACC,6BAEAA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAOO,EAAOG,GAAGV,GACjBC,KAASM,EAAOG,GAAGT,KACnBC,MAAQK,EAAOG,GAAGR,aCCPU,EAZK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACrB,OACC,yBAAKV,UAAU,OACf,2BACAA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCCCI,EARA,SAACC,GACf,OACC,yBAAKC,MAAS,CAAEC,UAAW,SAAWC,OAAO,kBAAoBC,OAAO,UACtEJ,EAAMK,WCqDKC,G,wDAnDd,aAAc,IAAD,8BACZ,gBAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACZxB,OAAQ,GACRqB,YAAa,IAJF,E,gEAQO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAAEpB,OAAQ6B,S,+BAShC,IAAD,EACwBC,KAAKN,MAA5BxB,EADD,EACCA,OAAQqB,EADT,EACSA,YAEVU,EAAc/B,EAAOgC,QAAO,SAAAC,GAEjC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASd,EAAYa,kBAGtD,OAAIlC,EAAOoC,OAOX,yBAAKxC,UAAU,MACf,0CACA,kBAAC,EAAD,CAAaU,aAAgBwB,KAAKZ,iBAClC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUlB,OAAW+B,MAVb,2C,GA9BQM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEC,kBAAC,EAAD,OAGDC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.07ad05d9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id,name,email}) => {\n\n\treturn (\n\t\t<div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}` } className='w-50'/>\n\t\t\t<div>\n\t\t\t\t<h5>{name}</h5>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList =  ({robots}) => {\n\treturn (\n\t\t<div>\n\t{\n\t\trobots.map((item,i) => {\n\t\t\treturn (\n\t\t\t\t<Card \n\t\t\t\tkey={i} \n\t\t\t\tid = { robots[i].id } \n\t\t\t\tname = { robots[i].name} \n\t\t\t\temail={ robots[i].email} \n\t\t\t\t/>\n\n\t\t\t)\n\t\t})\n\t}\n\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchField = ({searchChange}) =>{\n\treturn (\n\t\t<div className=\"pa1\">\n\t\t<input\n\t\tclassName=\"pa2 ba b--green bg-lightest-blue\"\n\t\ttype=\"search\" \n\t\tplaceholder=\"search robots\"\n\t\tonChange = {searchChange}\n\t\t/>\n\t\t</div>\n\t);\n}\nexport default SearchField;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style = {{ overflowY :'scroll' , border:'1px solid black' , height:'800px' }}>\n\t\t\t{props.children}\n\t\t</div>\t\t\t\n\t);\n}\n\nexport default Scroll;","import React ,{Component}from 'react';\nimport CardList from '../Components/CardList';\nimport SearchField from '../Components/SearchField';\nimport Scroll from '../Components/Scroll';\nimport './App.css';\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n  \t\t.then(response => response.json())\n  \t\t.then(user => this.setState({ robots: user}));\n\t}\n\n\tonSearchChange = (event) =>{\n\t\tthis.setState({ searchfield: event.target.value});\n\n\t}\n\n\n\trender(){\n\t\tconst { robots, searchfield} = this.state;\n\t\t\n\t\tconst filterArray = robots.filter(robot =>{\n\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\n\t\tif(!robots.length){\n\t\t\treturn <h1>loading</h1>\n\t\t}\n\n\t\telse{\n\t\t\n\t\treturn(\n\t\t<div className=\"tc\">\n\t\t<h1>Robofrinds</h1>\n\t\t<SearchField searchChange = {this.onSearchChange} />\n\t\t<Scroll>\n\t\t<CardList robots = { filterArray }/>\n\t\t</Scroll>\n\t\t</div>\n\t\t);\t\n\t\t\n\t\t}\n\n\t\t\t\n\t}\n\t\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n  \t\n   <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}